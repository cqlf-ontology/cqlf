<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE rdf:RDF [
	<!ENTITY CQLF "http://www.semanticweb.org/oleg/ontologies/2020/1/CQLF-2_FeatureOntology#" >
	<!ENTITY owl "http://www.w3.org/2002/07/owl#" >
	<!ENTITY xsd "http://www.w3.org/2001/XMLSchema#" >
	<!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
	<!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#" >
]>
<rdf:RDF xmlns="http://www.semanticweb.org/oleg/ontologies/2020/1/CQLF-2_FeatureOntology#" xmlns:owl="http://www.w3.org/2002/07/owl#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xml:base="http://www.semanticweb.org/oleg/ontologies/2020/1/CQLF-2_FeatureOntology">
    <owl:Ontology rdf:about="http://www.semanticweb.org/oleg/ontologies/2020/1/CQLF-2_FeatureOntology">
        <rdfs:comment>CQLF-2 Feature Ontology of CQL features.

Functional Expression:
        - features not inherent to primary data, e.g. Annotation, PartialMatch, etc.

DotOperator Expression:
        - features inherent to primary data, e.g. surface, character_span


Assumptions:
        - Binary relations represent any n-ary relation.


Parameterised query expressions:
⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳</rdfs:comment>
    </owl:Ontology>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotation properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- &CQLF;complexity -->

    <owl:AnnotationProperty rdf:about="&CQLF;complexity">
        <rdfs:comment>Number of Functionalities involved in (Frame | UseCase)</rdfs:comment>
        <rdfs:label xml:lang="en">complexity</rdfs:label>
    </owl:AnnotationProperty>
    


    <!-- &CQLF;searchNeed -->

    <owl:AnnotationProperty rdf:about="&CQLF;searchNeed">
        <rdfs:comment>- Natural language description of the semantics of a modeled concept
- Linguistic pattern the end user is looking for</rdfs:comment>
        <rdfs:label xml:lang="en">searchNeed</rdfs:label>
    </owl:AnnotationProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Object Properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- &CQLF;involves -->

    <owl:ObjectProperty rdf:about="&CQLF;involves">
        <owl:inverseOf rdf:resource="&CQLF;isInvolvedBy"/>
        <rdfs:domain rdf:resource="&CQLF;Frame"/>
        <rdfs:range rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">involves</rdfs:label>
    </owl:ObjectProperty>
    


    <!-- &CQLF;isInvolvedBy -->

    <owl:ObjectProperty rdf:about="&CQLF;isInvolvedBy">
        <rdf:type rdf:resource="&owl;IrreflexiveProperty"/>
        <rdfs:domain rdf:resource="&CQLF;Functionality"/>
        <rdfs:range rdf:resource="&CQLF;Frame"/>
        <rdfs:label xml:lang="en">isInvolvedBy</rdfs:label>
    </owl:ObjectProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Data properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- &CQLF;encoding -->

    <owl:DatatypeProperty rdf:about="&CQLF;encoding">
        <rdfs:domain rdf:resource="&CQLF;UseCase"/>
        <rdfs:range rdf:resource="&rdf;PlainLiteral"/>
        <rdfs:label xml:lang="en">encoding</rdfs:label>
    </owl:DatatypeProperty>
    


    <!-- &CQLF;example -->

    <owl:DatatypeProperty rdf:about="&CQLF;example">
        <rdfs:domain rdf:resource="&CQLF;UseCase"/>
        <rdfs:range rdf:resource="&rdf;PlainLiteral"/>
        <rdfs:label xml:lang="en">example</rdfs:label>
    </owl:DatatypeProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Classes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- &CQLF;SketchEngine -->

    <owl:Class rdf:about="&CQLF;SketchEngine">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">SketchEngine</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Sensitive[case=true](Annotation(GraphRelation(Object,Object))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Sensitive[case=true](Annotation(GraphRelation(Object,Object)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Sensitivity(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by specific annotation [tag:value] where {value} is sensitive for case</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Sensitive[ case=true ]( Annotation( GraphRelation( Object, Object ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;CATMA -->

    <owl:Class rdf:about="&CQLF;CATMA">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">CATMA</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(Repetition) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Quantification"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Repetition"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( Repetition )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(Distance(GraphRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(GraphRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(GraphRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( Distance( GraphRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Union(Annotation(Token),Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Union(Annotation(Token),Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ConstraintCombination(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Union( Annotation( Token ), Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:ConstraintCombination(Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:ConstraintCombination(Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ConstraintCombination"/>
        <rdfs:comment>Combination of constraints on a single object.</rdfs:comment>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: ConstraintCombination( Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:WildCard(Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:WildCard(Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:PartialMatch(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: WildCard( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:WildCard(Annotation(GraphRelation(Object,Object))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:WildCard(Annotation(GraphRelation(Object,Object)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:PartialMatch(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by specific annotation (tag:value) where {value} is partially matched by wildcard</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: WildCard( Annotation( GraphRelation( Object, Object ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME]:PartialMatch(Annotation(GraphRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME]:PartialMatch(Annotation(GraphRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(GraphRelation)"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one object (group | sequence)? to another by specific annotation (tag:value) where {value} is partially matched</searchNeed>
        <rdfs:label xml:lang="en">[FRAME]: PartialMatch( Annotation( GraphRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Repetition[min=N,max=M](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Repetition[min=N,max=M](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Repetition[ min=N, max=M ] ( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:CaseSensitivity(Annotation(Node)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:CaseSensitivity(Annotation(Node))">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation(Object))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: CaseSensitivity( Annotation( Node ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;PartialMatch"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Annotation"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: PartialMatch( Annotation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Arity[min=N,max=M](Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Arity[min=N,max=M](Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Arity[ min=N, max=M ]( Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Annotation(Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Annotation(Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Annotation( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;QueryLanguage -->

    <owl:Class rdf:about="&CQLF;QueryLanguage">
        <rdfs:label xml:lang="en">QueryLanguage</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[max=N](Token,Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[max=N](Token,Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ max=N ] ( Token, Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:case[sensitive](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:case[sensitive](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:SensitivityConstraint(Token)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: case[ sensitive ] ( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Repetition[*](TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Repetition[*](TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(ObjectSequence)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Repetition[ * ] ( TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;TigerSearch -->

    <owl:Class rdf:about="&CQLF;TigerSearch">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">TigerSearch</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME]:Sensitivity(Annotation(GraphRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME]:Sensitivity(Annotation(GraphRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(GraphRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation)"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one object (group | sequence)? to another by specific annotation [tag:value] where {value} is sensitive for (case | diacritics)</searchNeed>
        <rdfs:label xml:lang="en">[FRAME]: Sensitivity( Annotation( GraphRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Segmentation -->

    <owl:Class rdf:about="&CQLF;Segmentation">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Linear"/>
        <rdfs:label xml:lang="en">Segmentation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;CorpusSearchQL -->

    <owl:Class rdf:about="&CQLF;CorpusSearchQL">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">CorpusSearchQL</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:diacritics[insensitive](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:diacritics[insensitive](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:SensitivityConstraint(Token)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: diacritics[ insensitive ]( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Annotation(Domination(NodeA,NodeB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Annotation(Domination(NodeA,NodeB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Annotation(TreeRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Annotation( Domination( Node A, Node B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Intersection(Annotation(Token),Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Intersection(Annotation(Token),Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ConstraintCombination(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Intersection( Annotation( Token ), Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Precedence(Token,Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Precedence(Token,Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Precedence( Token, Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Repetition[min=N,max=M](Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Repetition[min=N,max=M](Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition(Annotation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Repetition[ min=N, max=M ] ( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME]:Annotation(Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME]:Annotation(Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Annotation"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <searchNeed>Anonymous object by specific annotation (tag:value)</searchNeed>
        <rdfs:label xml:lang="en">[FRAME]: Annotation( Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[left](Token,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[left](Token,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(Object,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ left ] ( Token, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: RegularExpression( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Annotation(Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Annotation(Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Annotation( Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Functionality -->

    <owl:Class rdf:about="&CQLF;Functionality">
        <rdfs:subClassOf rdf:resource="&CQLF;[CQLF-2]FeatureOntology"/>
        <rdfs:label xml:lang="en">Functionality</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;ContainmentRelation -->

    <owl:Class rdf:about="&CQLF;ContainmentRelation">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Complex"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SimpleAnnotation"/>
        <rdfs:label xml:lang="en">ContainmentRelation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Distance(LinearRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Distance(LinearRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;LinearRelation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Distance"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Distance( LinearRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Module -->

    <owl:Class rdf:about="&CQLF;Module">
        <rdfs:subClassOf rdf:resource="&CQLF;[CQLF-1]MetaModel"/>
        <rdfs:label xml:lang="en">Module</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Distance(GraphRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Distance(GraphRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Distance"/>
        <rdfs:subClassOf rdf:resource="&CQLF;GraphRelationSearch"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Distance( GraphRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:case[insensitive](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:case[insensitive](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:SensitivityConstraint(Token)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: case[ insensitive ] ( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:MetaData -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:MetaData">
        <rdfs:subClassOf rdf:resource="&CQLF;MetaDataSearch"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: MetaData</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation(TreeRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation(TreeRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Annotation(TreeRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: PartialMatch( Annotation( TreeRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Repetition[+](AnnotationSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Repetition[+](AnnotationSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(ObjectSequence)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Repetition[ + ] ( AnnotationSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](TokenSequence,TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](TokenSequence,TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N, max=M ] ( TokenSequence, TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Domination(NodeA,NodeB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Domination(NodeA,NodeB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(TreeRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N, max=M ]( Domination( Node A, Node B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Precedence(Node,Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Precedence(Node,Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Precedence( Node, Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME]:GraphRelation(Object,Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME]:GraphRelation(Object,Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;GraphRelationSearch"/>
        <rdfs:label xml:lang="en">[FRAME]: GraphRelation( Object, Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;PlainText -->

    <owl:Class rdf:about="&CQLF;PlainText">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Linear"/>
        <rdfs:label xml:lang="en">PlainText</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:NameSpace(Annotation(GraphRelation(Object,Object))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:NameSpace(Annotation(GraphRelation(Object,Object)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:NameSpace(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by specific annotation (tag:value) which is derived from a specific namespace (namespace:tag)</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: NameSpace( Annotation( GraphRelation( Object, Object ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](GraphRelation(TokenA,TokenB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](GraphRelation(TokenA,TokenB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N, max=M ]( GraphRelation( Token A, Token B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(Repetition(Annotation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition(Annotation))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Repetition(Annotation))"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( Repetition( Annotation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Repetition[min=N](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Repetition[min=N](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Repetition[ min=N ] ( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Cosmas2 -->

    <owl:Class rdf:about="&CQLF;Cosmas2">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">Cosmas2</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Domination(NodeA,NodeB) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Domination(NodeA,NodeB)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Domination( Node A, Node B )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;MatchingStrategy -->

    <owl:Class rdf:about="&CQLF;MatchingStrategy">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">MatchingStrategy</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME]:NameSpace(Annotation(GraphRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME]:NameSpace(Annotation(GraphRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(GraphRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation)"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one object (group | sequence)? to another by specific annotation (tag:value) which is derived from a specific namespace (namespace:tag)</searchNeed>
        <rdfs:label xml:lang="en">[FRAME]: NameSpace( Annotation( GraphRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Length[min=N](TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Length[min=N](TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(ObjectSequence)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Length[ min=N ] ( TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Linear -->

    <owl:Class rdf:about="&CQLF;Linear">
        <rdfs:subClassOf rdf:resource="&CQLF;Level"/>
        <rdfs:label xml:lang="en">Linear</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:NameSpace(Annotation(Object)) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:NameSpace(Annotation(Object))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation)"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <searchNeed>Anonymous object by specific annotation (tag:value) which is derived from specific namespace (namespace:tag)</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: NameSpace( Annotation( Object ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:ContainmentRelation(ObjectSequence,Context) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(ObjectSequence,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ContainmentRelationSearch"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: ContainmentRelation( ObjectSequence, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:ContainmentRelation(Object,Context) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(Object,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ContainmentRelationSearch"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: ContainmentRelation( Object, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:DiacriticsSensitivity(Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:DiacriticsSensitivity(Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation(Object))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: DiacriticsSensitivity( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:NameSpace(Annotation(Domination(NodeA,NodeB))) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:NameSpace(Annotation(Domination(NodeA,NodeB)))">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation(TreeRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: NameSpace( Annotation( Domination( Node A, Node B ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Complex -->

    <owl:Class rdf:about="&CQLF;Complex">
        <rdfs:subClassOf rdf:resource="&CQLF;Level"/>
        <rdfs:label xml:lang="en">Complex</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;NQL -->

    <owl:Class rdf:about="&CQLF;NQL">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">NQL</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(Token,Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(Token,Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(LinearRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ * ]( Precedence( Token, Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;MetaData -->

    <owl:Class rdf:about="&CQLF;MetaData">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:label xml:lang="en">MetaData</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Longest -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Longest">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:MatchingStrategy"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Longest</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Collocation(Annotation(TokenA),Annotation(TokenB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Collocation(Annotation(TokenA),Annotation(TokenB))">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Collocation( Annotation( Token A ), Annotation( Token B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[CQLF-2]FeatureOntology -->

    <owl:Class rdf:about="&CQLF;[CQLF-2]FeatureOntology">
        <rdfs:label xml:lang="en">[CQLF-2] Feature Ontology</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Annotation(TreeRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Annotation(TreeRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Annotation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;TreeRelation"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Annotation( TreeRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Token,Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Token,Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N, max=M ] ( Token, Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:Size(Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:Size(Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;SizeConstraint"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: Size( Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;ObjectType -->

    <owl:Class rdf:about="&CQLF;ObjectType">
        <rdfs:subClassOf rdf:resource="&CQLF;[CQLF-2]FeatureOntology"/>
        <rdfs:label xml:lang="en">ObjectType</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Arity[min=N](Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Arity[min=N](Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Arity[ min=N ]( Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Length[min=N](Token::CharacterSpan) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Length[min=N](Token::CharacterSpan)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Length[ min=N ] ( Token::CharacterSpan )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:diacritics[sensitive](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:diacritics[sensitive](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:SensitivityConstraint(Token)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: diacritics[ sensitive ]( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[within](Token,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[within](Token,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(Object,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ within ] ( Token, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(Node)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(Node))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: RegularExpression( Annotation( Node ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Distance(TreeRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Distance(TreeRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Distance"/>
        <rdfs:subClassOf rdf:resource="&CQLF;TreeRelation"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Distance( TreeRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;DependencyRelation -->

    <owl:Class rdf:about="&CQLF;DependencyRelation">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Complex"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SimpleAnnotation"/>
        <rdfs:label xml:lang="en">DependencyRelation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(FuzzySearch) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(FuzzySearch)">
        <rdfs:subClassOf rdf:resource="&CQLF;FuzzySearch"/>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( FuzzySearch )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Frame -->

    <owl:Class rdf:about="&CQLF;Frame">
        <rdfs:subClassOf rdf:resource="&CQLF;[CQLF-2]FeatureOntology"/>
        <rdfs:label xml:lang="en">Frame</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(TreeRelation(NodeA,NodeB))) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(TreeRelation(NodeA,NodeB)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation(TreeRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: RegularExpression( Annotation( TreeRelation( Node A, Node B ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;MetaDataSearch -->

    <owl:Class rdf:about="&CQLF;MetaDataSearch">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:subClassOf rdf:resource="&CQLF;MetaData"/>
        <rdfs:label xml:lang="en">MetaDataSearch</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Annotation(GraphRelation(Object::surface,Object::surface)) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Annotation(GraphRelation(Object::surface,Object::surface))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(GraphRelation)"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <searchNeed>Graph relation pointing from one object (specified by surface form) to another by specific annotation (tag:value)</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Annotation( GraphRelation( Object::surface, Object::surface ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:frequency[<N] -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:frequency[&lt;N]">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:FrequencyConstraint"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: frequency [ &lt; N ]</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Repetition[+](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Repetition[+](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Repetition[ + ]( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Length[+](TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Length[+](TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(ObjectSequence)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Length[ + ] ( TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Repetition[max=N](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Repetition[max=N](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Repetition[ max=N ] ( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[immediate](GraphRelation(TokenA,TokenB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[immediate](GraphRelation(TokenA,TokenB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(GraphRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ immediate ]( GraphRelation( Token A, Token B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N](Domination(NodeA,NodeB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N](Domination(NodeA,NodeB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(TreeRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N ]( Domination( Node A, Node B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:PartialMatch(Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:PartialMatch(Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;PartialMatch"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: PartialMatch( Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:SensitivityConstraint(Token) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:SensitivityConstraint(Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SensitivityConstraint"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: SensitivityConstraint( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N](GraphRelation(TokenA,TokenB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N](GraphRelation(TokenA,TokenB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N ]( GraphRelation( Token A, Token B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[left](TokenSequence,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[left](TokenSequence,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(ObjectSequence,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ left ] ( TokenSequence, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Repetition[*](AnnotationSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Repetition[*](AnnotationSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(ObjectSequence)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Repetition[ * ] ( AnnotationSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:rightmostChild(Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:rightmostChild(Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(TreeRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: rightmostChild( Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;StockholmTreeAligner -->

    <owl:Class rdf:about="&CQLF;StockholmTreeAligner">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">StockholmTreeAligner</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Collocation(Annotation(Object),Annotation(Object)) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Collocation(Annotation(Object),Annotation(Object))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <searchNeed>Immediate collocation of anonymous objects by their annotations (tag:value)</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Collocation( Annotation( Object ), Annotation( Object ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Repetition(Annotation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Repetition(Annotation))">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Annotation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Repetition"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Repetition( Annotation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;LinearRelation -->

    <owl:Class rdf:about="&CQLF;LinearRelation">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">LinearRelation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;ContainmentRelationSearch -->

    <owl:Class rdf:about="&CQLF;ContainmentRelationSearch">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ContainmentRelation"/>
        <rdfs:label xml:lang="en">ContainmentRelationSearch</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;AlignedAnnotation -->

    <owl:Class rdf:about="&CQLF;AlignedAnnotation">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:label xml:lang="en">AlignedAnnotation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[*](Collocation(TokenSequence,TokenSequence)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[*](Collocation(TokenSequence,TokenSequence))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(LinearRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(ObjectSequence,ObjectSequence)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ * ]( Collocation( TokenSequence, TokenSequence ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;SensitivityConstraint -->

    <owl:Class rdf:about="&CQLF;SensitivityConstraint">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">SensitivityConstraint</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Fangorn -->

    <owl:Class rdf:about="&CQLF;Fangorn">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">Fangorn</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:FuzzySearch(Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:FuzzySearch(Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;FuzzySearch"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: FuzzySearch( Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;ObjectGroup -->

    <owl:Class rdf:about="&CQLF;ObjectGroup">
        <rdfs:subClassOf rdf:resource="&CQLF;ObjectType"/>
        <rdfs:label xml:lang="en">ObjectGroup</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:Repetition(Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:Repetition(Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Repetition"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: Repetition( Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:WildCard(Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:WildCard(Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: WildCard( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:RegularExpression(Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:RegularExpression(Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:PartialMatch(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: RegularExpression( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Length[max=N](Token::CharacterSpan) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Length[max=N](Token::CharacterSpan)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Length[ max=N ] ( Token::CharacterSpan )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Sensitive[case=false](Annotation(GraphRelation(Object,Object))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Sensitive[case=false](Annotation(GraphRelation(Object,Object)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Sensitivity(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by its annotation [tag:value] where {value} is NOT sensitive for case</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Sensitive[ case=false ]( Annotation( GraphRelation( Object, Object ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(Distance(TreeRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(TreeRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(TreeRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance)"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( Distance( TreeRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;LPath -->

    <owl:Class rdf:about="&CQLF;LPath">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">LPath</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Arity[max=N](Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Arity[max=N](Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Arity[ max=N ]( Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;AnnotationNamespace -->

    <owl:Class rdf:about="&CQLF;AnnotationNamespace">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SimpleAnnotation"/>
        <rdfs:label xml:lang="en">AnnotationNamespace</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;PartialMatch -->

    <owl:Class rdf:about="&CQLF;PartialMatch">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:comment>the use of regular expressions as well as wildcard matching, as a simplified version of regular expressions, for querying sequences of characters by partial matching. 

Character matching can be used for searching text segments and contents of annotations as well as structure names and labels of relations. 

We note that, in the capacity of the CQLF as a basis for mapping algorithms, the use of wildcard matching would constitute an example of unidirectional mappings (from wildcards into regular expressions). The other direction would in most cases imply information loss.</rdfs:comment>
        <rdfs:label xml:lang="en">PartialMatch</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;grep -->

    <owl:Class rdf:about="&CQLF;grep">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">grep</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:getRoot(Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:getRoot(Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(TreeRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: getRoot( Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Length[*](Token::CharacterSpan) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Length[*](Token::CharacterSpan)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Length[ * ] ( Token::CharacterSpan )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Distance -->

    <owl:Class rdf:about="&CQLF;Distance">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">Distance</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Length[max=N](TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Length[max=N](TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(ObjectSequence)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Length[ max=N ] ( TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;ConcurrentAnnotation -->

    <owl:Class rdf:about="&CQLF;ConcurrentAnnotation">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:label xml:lang="en">ConcurrentAnnotation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:PointingRelation(TokenA,TokenB) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:PointingRelation(TokenA,TokenB)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: PointingRelation( Token A, Token B )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME]:Annotation(GraphRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME]:Annotation(GraphRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Annotation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;GraphRelationSearch"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <searchNeed>Graph relation pointing from one object (group | sequence)? to another by specific annotation (tag:value)</searchNeed>
        <rdfs:label xml:lang="en">[FRAME]: Annotation( GraphRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;DDDQuery -->

    <owl:Class rdf:about="&CQLF;DDDQuery">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">DDDQuery</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[max=N](TokenSequence,TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[max=N](TokenSequence,TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ max=N ] ( TokenSequence, TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Collocation(Node,Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Collocation(Node,Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Collocation( Node, Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[*](Domination(NodeA,NodeB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[*](Domination(NodeA,NodeB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(TreeRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ * ]( Domination( Node A, Node B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[right](Token,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[right](Token,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(Object,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ right ] ( Token, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[max=N](GraphRelation(TokenA,TokenB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[max=N](GraphRelation(TokenA,TokenB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ max=N ]( GraphRelation( Token A, Token B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:FrequencyConstraint -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:FrequencyConstraint">
        <rdfs:subClassOf rdf:resource="&CQLF;FrequencyConstraint"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: FrequencyConstraint</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Annotation -->

    <owl:Class rdf:about="&CQLF;Annotation">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SimpleAnnotation"/>
        <searchNeed>Object (group | sequence | relation)? by its specific annotation (tag:value)</searchNeed>
        <rdfs:label xml:lang="en">Annotation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:MatchingStrategy -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:MatchingStrategy">
        <rdfs:subClassOf rdf:resource="&CQLF;MatchingStrategy"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: MatchingStrategy</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;PML-TQ -->

    <owl:Class rdf:about="&CQLF;PML-TQ">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">PML-TQ</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:Repetition(ObjectSequence) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:Repetition(ObjectSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Repetition"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: Repetition( ObjectSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N](Token,Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N](Token,Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N ] ( Token, Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Repetition[+](TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Repetition[+](TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(ObjectSequence)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Repetition[ + ] ( TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Collocation(Token,Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Collocation(Token,Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Collocation( Token, Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[max=N](Domination(NodeA,NodeB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[max=N](Domination(NodeA,NodeB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(TreeRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ max=N ]( Domination( Node A, Node B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:SisterRelation(NodeA,NodeB) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:SisterRelation(NodeA,NodeB)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: SisterRelation( Node A, Node B )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Repetition[*](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Repetition[*](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Repetition(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Repetition[ * ] ( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Precedence(Annotation(Object),Annotation(Object)) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Precedence(Annotation(Object),Annotation(Object))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <searchNeed>Immediate precedence of anonymous objects by their annotations (tag:value)</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Precedence( Annotation( Object ), Annotation( Object ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Quantification -->

    <owl:Class rdf:about="&CQLF;Quantification">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">Quantification</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;CQL -->

    <owl:Class rdf:about="&CQLF;CQL">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">CQL</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;MQL -->

    <owl:Class rdf:about="&CQLF;MQL">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">MQL</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[CQLF-1]MetaModel -->

    <owl:Class rdf:about="&CQLF;[CQLF-1]MetaModel">
        <rdfs:label xml:lang="en">[CQLF-1] MetaModel</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;SizeConstraint -->

    <owl:Class rdf:about="&CQLF;SizeConstraint">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">SizeConstraint</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Length[+](Token::CharacterSpan) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Length[+](Token::CharacterSpan)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Length[ + ] ( Token::CharacterSpan )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:frequency[N] -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:frequency[N]">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:FrequencyConstraint"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: frequency [ N ]</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME]:Repetition(ContainmentRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME]:Repetition(ContainmentRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ContainmentRelationSearch"/>
        <rdfs:label xml:lang="en">[FRAME]: Repetition( ContainmentRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;CQP -->

    <owl:Class rdf:about="&CQLF;CQP">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">CQP</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[min=N](TokenSequence,TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[min=N](TokenSequence,TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ min=N ] ( TokenSequence, TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[fullmatch](TokenSequence,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[fullmatch](TokenSequence,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(ObjectSequence,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ fullmatch ] ( TokenSequence, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:frequency[>N] -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:frequency[&gt;N]">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:FrequencyConstraint"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: frequency [ &gt; N ]</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;TreeRelation -->

    <owl:Class rdf:about="&CQLF;TreeRelation">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:subClassOf rdf:resource="&CQLF;HierarchicalRelation"/>
        <rdfs:label xml:lang="en">TreeRelation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Object -->

    <owl:Class rdf:about="&CQLF;Object">
        <rdfs:subClassOf rdf:resource="&CQLF;ObjectType"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ObjectGroup"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ObjectSequence"/>
        <rdfs:label xml:lang="en">Object</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;GraphRelationSearch -->

    <owl:Class rdf:about="&CQLF;GraphRelationSearch">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:subClassOf rdf:resource="&CQLF;DependencyRelation"/>
        <rdfs:label xml:lang="en">GraphRelationSearch</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Length[min=N,max=M](TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Length[min=N,max=M](TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(ObjectSequence)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Length[ min=N, max=M ] ( TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SensitivityConstraint"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Annotation"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: SensitivityConstraint( Annotation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Length[*](TokenSequence) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Length[*](TokenSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(ObjectSequence)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Length[ * ] ( TokenSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Annotation(GraphRelation(Object,Object)) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Annotation(GraphRelation(Object,Object))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(GraphRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by specific annotation (tag:value)</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Annotation( GraphRelation( Object, Object ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;ObjectSequence -->

    <owl:Class rdf:about="&CQLF;ObjectSequence">
        <rdfs:subClassOf rdf:resource="&CQLF;ObjectGroup"/>
        <rdfs:label xml:lang="en">ObjectSequence</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[within](TokenSequence,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[within](TokenSequence,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(ObjectSequence,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ within ] ( TokenSequence, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[mediate](GraphRelation(TokenA,TokenB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[mediate](GraphRelation(TokenA,TokenB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(GraphRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ mediate ]( GraphRelation( Token A, Token B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Repetition[max=N](Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Repetition[max=N](Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition(Annotation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Repetition[ max=N ] ( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;UseCase -->

    <owl:Class rdf:about="&CQLF;UseCase">
        <rdfs:subClassOf rdf:resource="&CQLF;[CQLF-2]FeatureOntology"/>
        <rdfs:label xml:lang="en">UseCase</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Position -->

    <owl:Class rdf:about="&CQLF;Position">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">Position</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:WildCard(Annotation(Domination(NodeA,NodeB))) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:WildCard(Annotation(Domination(NodeA,NodeB)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation(TreeRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: WildCard( Annotation( Domination( Node A, Node B ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;HierarchicalRelation -->

    <owl:Class rdf:about="&CQLF;HierarchicalRelation">
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Complex"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SimpleAnnotation"/>
        <rdfs:label xml:lang="en">HierarchicalRelation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:NameSpace(Annotation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;AnnotationNamespace"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Annotation"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: NameSpace( Annotation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:WildCard(Annotation(Node)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:WildCard(Annotation(Node))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:PartialMatch(Annotation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: WildCard( Annotation( Node ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;PoliqarpPlus -->

    <owl:Class rdf:about="&CQLF;PoliqarpPlus">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">PoliqarpPlus</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Complement(Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Complement(Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ConstraintCombination(Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Complement( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:similarity[%](Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:similarity[%](Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(FuzzySearch)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:FuzzySearch(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: similarity [ % ] ( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:RegEx(Annotation(GraphRelation(Object,Object))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:RegEx(Annotation(GraphRelation(Object,Object)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:PartialMatch(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by specific annotation (tag:value) where {value} is partially matched by regular expression</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: RegEx( Annotation( GraphRelation( Object, Object ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[+](Domination(NodeA,NodeB)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[+](Domination(NodeA,NodeB))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(TreeRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ + ]( Domination( Node A, Node B ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;DGD -->

    <owl:Class rdf:about="&CQLF;DGD">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">DGD</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Repetition[min=N](Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Repetition[min=N](Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Annotation(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Repetition(Annotation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Repetition[ min=N ] ( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;AQL -->

    <owl:Class rdf:about="&CQLF;AQL">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">AQL</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Tgrep2 -->

    <owl:Class rdf:about="&CQLF;Tgrep2">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">Tgrep2</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;ContainmentRelationSearch"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Position"/>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Position( ContainmentRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;DDCQL -->

    <owl:Class rdf:about="&CQLF;DDCQL">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">DDCQL</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;SimpleAnnotation -->

    <owl:Class rdf:about="&CQLF;SimpleAnnotation">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Module"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Linear"/>
        <rdfs:label xml:lang="en">SimpleAnnotation</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Concurrent -->

    <owl:Class rdf:about="&CQLF;Concurrent">
        <rdfs:subClassOf rdf:resource="&CQLF;Level"/>
        <rdfs:label xml:lang="en">Concurrent</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:DiacriticsSensitivity(Annotation(Node)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:DiacriticsSensitivity(Annotation(Node))">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation(Object))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: DiacriticsSensitivity( Annotation( Node ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:Size(ObjectSequence) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:Size(ObjectSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;SizeConstraint"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: Size( ObjectSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Position(TreeRelation) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Position(TreeRelation)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;TreeRelation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Position"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Position( TreeRelation )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;LinearRelation"/>
        <complexity rdf:datatype="&xsd;integer">1</complexity>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: LinearRelation( Object, Object )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;BlackLab -->

    <owl:Class rdf:about="&CQLF;BlackLab">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">BlackLab</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[*](Collocation(Token,Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[*](Collocation(Token,Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(LinearRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(Object,Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ * ]( Collocation( Token, Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(Distance(LinearRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(LinearRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Distance)"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( Distance( LinearRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;ConstraintCombination -->

    <owl:Class rdf:about="&CQLF;ConstraintCombination">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">ConstraintCombination</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:RegEx(Annotation(GraphRelation(Object::surface,Object::surface))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:RegEx(Annotation(GraphRelation(Object::surface,Object::surface)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:PartialMatch(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one object (specified by its surface form) to another by its specific annotation (tag:value) where {value} is partially matched by regular expression</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: RegEx( Annotation( GraphRelation( Object::surface, Object::surface ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:NameSpace(Annotation(SisterRelation(NodeA,NodeB))) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:NameSpace(Annotation(SisterRelation(NodeA,NodeB)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation(TreeRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: NameSpace( Annotation( SisterRelation( Node A, Node B ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Repetition -->

    <owl:Class rdf:about="&CQLF;Repetition">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">Repetition</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Level -->

    <owl:Class rdf:about="&CQLF;Level">
        <rdfs:subClassOf rdf:resource="&CQLF;[CQLF-1]MetaModel"/>
        <rdfs:label xml:lang="en">Level</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Sensitive[diacritics=true](Annotation(GraphRelation(Object,Object))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Sensitive[diacritics=true](Annotation(GraphRelation(Object,Object)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Sensitivity(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by specific annotation [tag:value] where {value} is sensitive for diacritics</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Sensitive[ diacritics=true ]( Annotation( GraphRelation( Object, Object ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;Poliqarp -->

    <owl:Class rdf:about="&CQLF;Poliqarp">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">Poliqarp</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:LinearRelation(ObjectSequence,ObjectSequence) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:LinearRelation(ObjectSequence,ObjectSequence)">
        <rdfs:subClassOf rdf:resource="&CQLF;LinearRelation"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: LinearRelation( ObjectSequence, ObjectSequence )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Complement(Token) -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Complement(Token)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ConstraintCombination(Object)"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Complement( Token )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:Sensitive[diacritics=false](Annotation(GraphRelation(Object,Object))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:Sensitive[diacritics=false](Annotation(GraphRelation(Object,Object)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:Sensitivity(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one anonymous object to another by specific annotation [tag:value] where {value} is NOT sensitive for diacritics</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: Sensitive[ diacritics=false ]( Annotation( GraphRelation( Object, Object ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(Size) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(Size)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;SizeConstraint"/>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( Size )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(TokenSequence,TokenSequence)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(TokenSequence,TokenSequence))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Distance(LinearRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:LinearRelation(ObjectSequence,ObjectSequence)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Distance[ * ]( Precedence( TokenSequence, TokenSequence ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB) -->

    <owl:Class rdf:about="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;TreeRelation"/>
        <rdfs:label xml:lang="en">[FRAME] [SIMPLE]: TreeRelation( Object A, Object B )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation(Object)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation(Object))">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation)"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: SensitivityConstraint( Annotation( Object ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;PhiloLogic -->

    <owl:Class rdf:about="&CQLF;PhiloLogic">
        <rdfs:subClassOf rdf:resource="&CQLF;QueryLanguage"/>
        <rdfs:label xml:lang="en">PhiloLogic</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;FuzzySearch -->

    <owl:Class rdf:about="&CQLF;FuzzySearch">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:comment>Approximate string matching</rdfs:comment>
        <rdfs:label xml:lang="en">FuzzySearch</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE]:NameSpace(Annotation(GraphRelation(Object::surface,Object::surface))) -->

    <owl:Class rdf:about="&CQLF;[USECASE]:NameSpace(Annotation(GraphRelation(Object::surface,Object::surface)))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:GraphRelation(Object,Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME]:NameSpace(Annotation(GraphRelation))"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <searchNeed>Graph relation pointing from one object (specified by surface form) to another by specific annotation (tag:value) which is derived from a specific namespace (namespace:tag)</searchNeed>
        <rdfs:label xml:lang="en">[USECASE]: NameSpace( Annotation( GraphRelation( Object::surface, Object::surface ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:NameSpace(Annotation(TreeRelation)) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation(TreeRelation))">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Annotation(TreeRelation)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation)"/>
        <complexity rdf:datatype="&xsd;integer">3</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: NameSpace( Annotation( TreeRelation ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Length[min=N,max=M](Token::CharacterSpan) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Length[min=N,max=M](Token::CharacterSpan)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:Size(Object)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Quantification(Size)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Length[ min=N, max=M ] ( Token::CharacterSpan )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;PlainTextSearch -->

    <owl:Class rdf:about="&CQLF;PlainTextSearch">
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:subClassOf rdf:resource="&CQLF;PlainText"/>
        <rdfs:label xml:lang="en">PlainTextSearch</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:NameSpace(Annotation(TreeRelation(NodeA,NodeB))) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:NameSpace(Annotation(TreeRelation(NodeA,NodeB)))">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:TreeRelation(ObjectA,ObjectB)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:NameSpace(Annotation(TreeRelation))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: NameSpace( Annotation( TreeRelation( Node A, Node B ) ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[fullmatch](Token,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[fullmatch](Token,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(Object,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ fullmatch ] ( Token, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:Containment[right](TokenSequence,Context) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:Containment[right](TokenSequence,Context)">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:ContainmentRelation(ObjectSequence,Context)"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(ContainmentRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: Containment[ right ] ( TokenSequence, Context )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:CaseSensitivity(Annotation(Token)) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:CaseSensitivity(Annotation(Token))">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:SensitivityConstraint(Annotation(Object))"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: CaseSensitivity( Annotation( Token ) )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[FRAME][COMPLEX]:Quantification(Distance) -->

    <owl:Class rdf:about="&CQLF;[FRAME][COMPLEX]:Quantification(Distance)">
        <rdfs:subClassOf rdf:resource="&CQLF;Frame"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Distance"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Quantification"/>
        <complexity rdf:datatype="&xsd;integer">2</complexity>
        <rdfs:label xml:lang="en">[FRAME] [COMPLEX]: Quantification( Distance )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][COMPLEX]:leftmostChild(Node) -->

    <owl:Class rdf:about="&CQLF;[USECASE][COMPLEX]:leftmostChild(Node)">
        <rdfs:subClassOf rdf:resource="&CQLF;UseCase"/>
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][COMPLEX]:Position(TreeRelation)"/>
        <rdfs:label xml:lang="en">[USECASE] [COMPLEX]: leftmostChild( Node )</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;FrequencyConstraint -->

    <owl:Class rdf:about="&CQLF;FrequencyConstraint">
        <rdfs:subClassOf rdf:resource="&CQLF;Segmentation"/>
        <rdfs:subClassOf rdf:resource="&CQLF;Functionality"/>
        <rdfs:label xml:lang="en">FrequencyConstraint</rdfs:label>
    </owl:Class>
    


    <!-- &CQLF;[USECASE][SIMPLE]:Shortest -->

    <owl:Class rdf:about="&CQLF;[USECASE][SIMPLE]:Shortest">
        <rdfs:subClassOf rdf:resource="&CQLF;[FRAME][SIMPLE]:MatchingStrategy"/>
        <rdfs:label xml:lang="en">[USECASE] [SIMPLE]: Shortest</rdfs:label>
    </owl:Class>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Individuals
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- &CQLF;node&node&#1$#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1$#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 $ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;tok="①"&tok="②"&#1->③[④="⑤"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;tok=&quot;①&quot;&amp;tok=&quot;②&quot;&amp;#1-&gt;③[④=&quot;⑤&quot;]#2">
        <rdf:type rdf:resource="&CQLF;[USECASE]:Annotation(GraphRelation(Object::surface,Object::surface))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <searchNeed>③[Graph relation] pointing from one ①[object (specified by surface form)] to ②[another] by specific annotation [④tag:⑤value]</searchNeed>
        <rdfs:label xml:lang="en">tok="①" &amp; tok="②" &amp; #1 -&gt;③[④="⑤"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;#pp:[cat="PP"]&#np:[cat="NP"]&(#x>*#pp)&(#x>*#np) -->

    <owl:NamedIndividual rdf:about="&CQLF;#pp:[cat=&quot;PP&quot;]&amp;#np:[cat=&quot;NP&quot;]&amp;(#x&gt;*#pp)&amp;(#x&gt;*#np)">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>This query finds the first common ancestor of PP and NP</rdfs:comment>
        <rdfs:label xml:lang="en">#pp:[cat="PP"] &amp; #np:[cat="NP"] &amp; (#x &gt;* #pp) &amp; (#x &gt;* #np)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="V.*"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;V.*&quot;]">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(Token))"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">[pos="V.*"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->coref#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;coref#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt;coref #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;(#n:[cat="NP"]>[pos="ART"])&(#n>*[pos="ADJA"]) -->

    <owl:NamedIndividual rdf:about="&CQLF;(#n:[cat=&quot;NP&quot;]&gt;[pos=&quot;ART&quot;])&amp;(#n&gt;*[pos=&quot;ADJA&quot;])">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>this query finds noun phrases (NP) which directly dominate an article (ART) and indirectly an attributive adjective (ADJA)</rdfs:comment>
        <rdfs:label xml:lang="en">(#n:[cat="NP"] &gt; [pos="ART"]) &amp; (#n &gt;* [pos="ADJA"])</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;SATZSTATUS="MAINDECL"&EDITION="07,11"&#1_o_#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;SATZSTATUS=&quot;MAINDECL&quot;&amp;EDITION=&quot;07,11&quot;&amp;#1_o_#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">SATZSTATUS="MAINDECL" &amp; EDITION="07,11" &amp; #1_o_#2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;pos=/V.*/&tok&#1->dep[func="punct"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;pos=/V.*/&amp;tok&amp;#1-&gt;dep[func=&quot;punct&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds verbs at the end of a sentence or a subordinate clause</rdfs:comment>
        <rdfs:label xml:lang="en">pos=/V.*/ &amp; tok &amp; #1-&gt;dep[func="punct"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"war"&"peace"&#1^#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;war&quot;&amp;&quot;peace&quot;&amp;#1^#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">"war" &amp; "peace" &amp; #1 ^ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;eine"wichtige"?Ansage -->

    <owl:NamedIndividual rdf:about="&CQLF;eine&quot;wichtige&quot;?Ansage">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds the word sequence "eine Aussage" or  "eine wichtige Aussage"</rdfs:comment>
        <rdfs:label xml:lang="en">eine "wichtige"? Ansage</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;simil="man"70% -->

    <owl:NamedIndividual rdf:about="&CQLF;simil=&quot;man&quot;70%">
        <rdf:type rdf:resource="&CQLF;CATMA"/>
        <rdfs:comment>This Query selects any word which is to 70 per cent similar to the word “man”.</rdfs:comment>
        <rdfs:label xml:lang="en">simil="man" 70%</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;ichfreuemich[] -->

    <owl:NamedIndividual rdf:about="&CQLF;ichfreuemich[]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>Finds any token following the string "ich freue mich"</rdfs:comment>
        <rdfs:label xml:lang="en">ich freue mich []</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&#1:tokenarity=3,5 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;#1:tokenarity=3,5">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>Find a noun phrase containing min. 3 and max. 5  tokens</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; #1:tokenarity=3,5</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;".+ismus" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;.+ismus&quot;">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds words ending with "ismus".</rdfs:comment>
        <rdfs:label xml:lang="en">".+ismus"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;fahren%w1:1nach -->

    <owl:NamedIndividual rdf:about="&CQLF;fahren%w1:1nach">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds the word "fahren" if it is not followed by the word "nach".</rdfs:comment>
        <rdfs:label xml:lang="en">fahren %w1:1 nach</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;exact-match("XPath")/containing-element::sentence/contained::exact-match("grammar") -->

    <owl:NamedIndividual rdf:about="&CQLF;exact-match(&quot;XPath&quot;)/containing-element::sentence/contained::exact-match(&quot;grammar&quot;)">
        <rdf:type rdf:resource="&CQLF;DDDQuery"/>
        <rdfs:comment>This query finds "XPath" and "grammar" occurring in the same sentence</rdfs:comment>
        <rdfs:label xml:lang="en">exact-match("XPath") / containing-element::sentence / contained::exact-match("grammar")</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"love"[]+"hate" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;love&quot;[]+&quot;hate&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(Token,Token))"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"love" [ ]+ "hate"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;sein -->

    <owl:NamedIndividual rdf:about="&CQLF;sein">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:label xml:lang="en">sein</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Sonne/s2:2Mond -->

    <owl:NamedIndividual rdf:about="&CQLF;Sonne/s2:2Mond">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds “Sonne” and “Mond” appearing in any order exactly two sentences apart (not in the same and not in adjacent sentences).</rdfs:comment>
        <rdfs:label xml:lang="en">Sonne /s2:2 Mond</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>[func="TMP"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;[func=&quot;TMP&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;[func = "TMP"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;//NP/DT -->

    <owl:NamedIndividual rdf:about="&CQLF;//NP/DT">
        <rdf:type rdf:resource="&CQLF;Fangorn"/>
        <rdfs:comment>finds a noun phrase which immediately dominates a determiner</rdfs:comment>
        <rdfs:label xml:lang="en">//NP/DT</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;‎/(M|m)ay‎/ -->

    <owl:NamedIndividual rdf:about="&CQLF;‎/(M|m)ay‎/">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">‎/(M | m)ay‎/</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"love"&"hate"&#1^3,5#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;love&quot;&amp;&quot;hate&quot;&amp;#1^3,5#2">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Token,Token)"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">"love" &amp; "hate" &amp; #1 ^3,5 #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<s/>containing[]*[tag="N.*"][]*[tag="N.*"][]* -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;s/&gt;containing[]*[tag=&quot;N.*&quot;][]*[tag=&quot;N.*&quot;][]*">
        <rdf:type rdf:resource="&CQLF;SketchEngine"/>
        <rdfs:comment>This query looks for all sentences containing more than one noun</rdfs:comment>
        <rdfs:label xml:lang="en">&lt;s/&gt; containing []* [tag="N.*"] []* [tag="N.*"] []*</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;((Tag/+w1der)/+w1offenen)/+w1Tür -->

    <owl:NamedIndividual rdf:about="&CQLF;((Tag/+w1der)/+w1offenen)/+w1Tür">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds the word sequence "Tag der offenen Tür" ('open day')</rdfs:comment>
        <rdfs:label xml:lang="en">((Tag /+w1 der) /+w1 offenen) /+w1 Tür</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=NN&case==nom] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=NN&amp;case==nom]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds all nouns whose all disambiguated case interpretations in the given context are nominative.</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=NN &amp; case==nom]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;fahren[orth!=nach] -->

    <owl:NamedIndividual rdf:about="&CQLF;fahren[orth!=nach]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds the word "fahren" if it is not followed by the word "nach".</rdfs:comment>
        <rdfs:label xml:lang="en">fahren [orth!=nach]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;#Fahren -->

    <owl:NamedIndividual rdf:about="&CQLF;#Fahren">
        <rdf:type rdf:resource="&CQLF;PhiloLogic"/>
        <rdfs:comment>This query matches capitalized words only, here "Fahren", but not "fahren".</rdfs:comment>
        <rdfs:label xml:lang="en">#Fahren</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node:Squery:!sawexists -->

    <owl:NamedIndividual rdf:about="&CQLF;node:Squery:!sawexists">
        <rdf:type rdf:resource="&CQLF;CorpusSearchQL"/>
        <rdfs:comment>This query finds sentences that do not include the word "saw"
(Lai and Bird: Querying and Updating Treebanks:
A Critical Survey and Requirements Analysis, section 2.4)</rdfs:comment>
        <rdfs:label xml:lang="en">node: S query: !saw exists</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;sie/+w1:1gehen -->

    <owl:NamedIndividual rdf:about="&CQLF;sie/+w1:1gehen">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds the word sequence "sie gehen".</rdfs:comment>
        <rdfs:label xml:lang="en">sie  /+w1:1 gehen</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=NN&case=nom] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=NN&amp;case=nom]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds all nouns with at least one nominative case interpretation marked as correct in the given context</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=NN &amp; case=nom]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="N.*"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;N.*&quot;]">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(Token))"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">[pos="N.* "]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;der/+w2:2Tag -->

    <owl:NamedIndividual rdf:about="&CQLF;der/+w2:2Tag">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds words "der" and "Tag" with exactly one word in between.</rdfs:comment>
        <rdfs:label xml:lang="en">der /+w2:2 Tag</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>3,5#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;3,5#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;3,5 #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;$x^1[-2]$y -->

    <owl:NamedIndividual rdf:about="&CQLF;$x^1[-2]$y">
        <rdf:type rdf:resource="&CQLF;NQL"/>
        <rdfs:comment>finds the next-to-last child of x</rdfs:comment>
        <rdfs:label xml:lang="en">$x ^1[-2] $y</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;IN(LEM('Würde'),'%',ELEM(HEAD)) -->

    <owl:NamedIndividual rdf:about="&CQLF;IN(LEM('Würde'),'%',ELEM(HEAD))">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query looks for "Würde" but not in headlines of texts</rdfs:comment>
        <rdfs:label xml:lang="en">IN(LEM('Würde'),'%',ELEM(HEAD))</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>[relname="elaboration"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;[relname=&quot;elaboration&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query searches for discourse units where one is rhetorically an elaboration of the other</rdfs:comment>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;[relname="elaboration"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;(AusländerODERMigranten)UNDProbleme -->

    <owl:NamedIndividual rdf:about="&CQLF;(AusländerODERMigranten)UNDProbleme">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds texts containing the word "Probleme" and  "Ausländer" or "Migranten".</rdfs:comment>
        <rdfs:label xml:lang="en">(Ausländer ODER Migranten) UND Probleme</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="(?i)nou"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;(?i)nou&quot;]">
        <rdf:type rdf:resource="&CQLF;BlackLab"/>
        <rdfs:comment>This query matches a pattern case insensitively,</rdfs:comment>
        <rdfs:label xml:lang="en">[pos="(?i)nou"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<s/>!containing[tag="N.*"] -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;s/&gt;!containing[tag=&quot;N.*&quot;]">
        <rdf:type rdf:resource="&CQLF;SketchEngine"/>
        <rdfs:comment>This query looks for sentences not containing any nouns</rdfs:comment>
        <rdfs:label xml:lang="en">&lt;s/&gt; !containing  [tag="N.*"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;($wword)(forall$mmorph):($w^1$m)->($m@type==“stem”) -->

    <owl:NamedIndividual rdf:about="&CQLF;($wword)(forall$mmorph):($w^1$m)-&gt;($m@type==“stem”)">
        <rdf:type rdf:resource="&CQLF;NQL"/>
        <rdfs:comment>This query finds words without affixes (all children of type morph must be marked as stems)</rdfs:comment>
        <rdfs:label xml:lang="en">($w word)(forall $m morph): ($w ^1 $m) -&gt; ($m@type == “stem”)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;sieprox////unorderedgehen -->

    <owl:NamedIndividual rdf:about="&CQLF;sieprox////unorderedgehen">
        <rdf:type rdf:resource="&CQLF;CQL"/>
        <rdfs:comment>This query finds the word sequence "gehen sie" or "sie gehen"</rdfs:comment>
        <rdfs:label xml:lang="en">sie prox////unordered gehen</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;#np:[cat="NP"]>@l#w1:[word=/[Dd]er/]&#np>*#w2:[word="Mann"]&#w1.#w2 -->

    <owl:NamedIndividual rdf:about="&CQLF;#np:[cat=&quot;NP&quot;]&gt;@l#w1:[word=/[Dd]er/]&amp;#np&gt;*#w2:[word=&quot;Mann&quot;]&amp;#w1.#w2">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>finds noun phrases beginning with „der Mann“</rdfs:comment>
        <rdfs:label xml:lang="en">#np:[cat="NP"] &gt;@l #w1:[word=/[Dd]er/] &amp; #np &gt;* #w2:[word="Mann"] &amp; #w1 . #w2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;([pos="RB"]+[pos="JJ"])?[pos="NN"] -->

    <owl:NamedIndividual rdf:about="&CQLF;([pos=&quot;RB&quot;]+[pos=&quot;JJ&quot;])?[pos=&quot;NN&quot;]">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">([pos="RB"]+ [pos="JJ"])? [pos="NN"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"very"+ -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;very&quot;+">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:Repetition[+](Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"very"+</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;a-node[afun='Pred',0xechilda-node[afun='Sb']] -->

    <owl:NamedIndividual rdf:about="&CQLF;a-node[afun='Pred',0xechilda-node[afun='Sb']]">
        <rdf:type rdf:resource="&CQLF;PML-TQ"/>
        <rdfs:comment>This query finds all predicates without a subject</rdfs:comment>
        <rdfs:label xml:lang="en">a-node [afun='Pred', 0x echild a-node [afun='Sb']]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>@r#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;@r#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;@r #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Gegenwart/s0Zukunft -->

    <owl:NamedIndividual rdf:about="&CQLF;Gegenwart/s0Zukunft">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:label xml:lang="en">Gegenwart /s0 Zukunft</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;TagderoffenenTür -->

    <owl:NamedIndividual rdf:about="&CQLF;TagderoffenenTür">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:label xml:lang="en">Tag der offenen Tür</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"very"{3} -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;very&quot;{3}">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Repetition[min=N,max=M](Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"very"{3}</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="NN"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;NN&quot;]">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:Annotation(Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">[pos="NN"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;długomszedł -->

    <owl:NamedIndividual rdf:about="&CQLF;długomszedł">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query will find all occurrences of the three segment sequence [długo][m] [szedł], interpretable as an adverb (długo 'long'), an agglutinate (-m 'be'), and an l-participle (szedł 'walk, go'), as well as all occurrences of the two-segment sequence [długom][szedł], where the first segment is interpreted as a dative nominal form (długom 'debts'), and the second as an l-participle.</rdfs:comment>
        <rdfs:label xml:lang="en">długom szedł</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"chapter"%c -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;chapter&quot;%c">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:case[insensitive](Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"chapter" %c</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;($w1word)($w2word)($ss):($w1@orth==“I”)&&($w2@orth==“I”)&&($s^$w1)&&($s^$w2)&&($w1!=$w2) -->

    <owl:NamedIndividual rdf:about="&CQLF;($w1word)($w2word)($ss):($w1@orth==“I”)&amp;&amp;($w2@orth==“I”)&amp;&amp;($s^$w1)&amp;&amp;($s^$w2)&amp;&amp;($w1!=$w2)">
        <rdf:type rdf:resource="&CQLF;NQL"/>
        <rdfs:comment>This query finds a duplication of the word “I” within a sentence</rdfs:comment>
        <rdfs:label xml:lang="en">($w1 word) ($w2 word) ($s s): ($w1@orth == “I”) &amp;&amp; ($w2@orth == “I”) &amp;&amp; ($s ^ $w1) &amp;&amp; ($s ^ $w2) &amp;&amp; ($w1 != $w2)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Sonneprox/=/2/Mond -->

    <owl:NamedIndividual rdf:about="&CQLF;Sonneprox/=/2/Mond">
        <rdf:type rdf:resource="&CQLF;CQL"/>
        <rdfs:comment>This query finds “Sonne” and “Mond” with exactly one word in between, e.g. “Sonne und Mond” or “Mond und Sonne”.</rdfs:comment>
        <rdfs:label xml:lang="en">Sonne prox/=/2/ Mond</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"war"[]{5}"peace" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;war&quot;[]{5}&quot;peace&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Token,Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"war" [ ]{5} "peace"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;#s:[cat="S"]!>*#w:[word="saw"] -->

    <owl:NamedIndividual rdf:about="&CQLF;#s:[cat=&quot;S&quot;]!&gt;*#w:[word=&quot;saw&quot;]">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>This query returns all combinations of two nodes #s, #w in all graphs, such that #s does not dominate #w.</rdfs:comment>
        <rdfs:label xml:lang="en">#s:[cat="S"] !&gt;* #w:[word="saw"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=adj]{2,} -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=adj]{2,}">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query matches a sequence of adjectives containing at least two adjectives.</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=adj]{2,}</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;pos=/P.*/&pos=/V.FIN/&#2->dep[func="sbj"]#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;pos=/P.*/&amp;pos=/V.FIN/&amp;#2-&gt;dep[func=&quot;sbj&quot;]#1">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query searches dependencies for pronominal subjects (func="sbj") of finite verbs</rdfs:comment>
        <rdfs:label xml:lang="en">pos=/P.*/ &amp; pos=/V.FIN/ &amp; #2 -&gt;dep[func="sbj"] #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;tok="①"&tok="②"&#1->③[④=/⑤/]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;tok=&quot;①&quot;&amp;tok=&quot;②&quot;&amp;#1-&gt;③[④=/⑤/]#2">
        <rdf:type rdf:resource="&CQLF;[USECASE]:RegEx(Annotation(GraphRelation(Object::surface,Object::surface)))"/>
        <searchNeed>③[Graph relation] pointing from one ①[object (specified by its surface form)] to ②[another] by its specific annotation[④tag:⑤value] where ⑤{value} is partially matched by regular expression</searchNeed>
        <rdfs:label xml:lang="en">tok="①" &amp; tok="②" &amp; #1 -&gt;③[④=/⑤/] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;①:②="③" -->

    <owl:NamedIndividual rdf:about="&CQLF;①:②=&quot;③&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE]:NameSpace(Annotation(Object))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <searchNeed>Anonymous object by specific annotation [②tag:③value] which is derived from specific ①[namespace (①namespace:②tag)]</searchNeed>
        <rdfs:label xml:lang="en">①:②="③"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"sie"&"gehen"&#1.#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;sie&quot;&amp;&quot;gehen&quot;&amp;#1.#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">"sie" &amp; "gehen" &amp; #1 . #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=ART][pos=ADJA]*[pos=NN] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=ART][pos=ADJA]*[pos=NN]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query matches a noun proceeded by an article and possibe adjectives.</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=ART][pos=ADJA]* [pos=NN]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;a-node$A:=[siblinga-node$B:=[afun~’^Aux’]] -->

    <owl:NamedIndividual rdf:about="&CQLF;a-node$A:=[siblinga-node$B:=[afun~’^Aux’]]">
        <rdf:type rdf:resource="&CQLF;PML-TQ"/>
        <rdfs:comment>finds a node of the type a-node, if its sibling is a node of type a-node with the value of the attribute “afun” starting with the substring “Aux”</rdfs:comment>
        <rdfs:label xml:lang="en">a-node $A :=[ sibling a-node $B:=[ afun~’^Aux’]]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1_l_#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1_l_#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 _l_ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="ADJA"&case=$1][pos="NN"&case=$1] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;ADJA&quot;&amp;case=$1][pos=&quot;NN&quot;&amp;case=$1]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds an adjective followed by noun in the same case</rdfs:comment>
        <rdfs:label xml:lang="en">[pos="ADJA" &amp; case=$1] [pos="NN" &amp; case= $1]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;#2">
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt; #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;przyszedł/i -->

    <owl:NamedIndividual rdf:about="&CQLF;przyszedł/i">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query will find all occurrencies of "przyszedł" as well as "Przyszedł".</rdfs:comment>
        <rdfs:label xml:lang="en">przyszedł/i</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>3#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;3#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;3 #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->dep#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;dep#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt;dep #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;anscheinendundscheinbar -->

    <owl:NamedIndividual rdf:about="&CQLF;anscheinendundscheinbar">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query searches for texts containing words "anscheinend" and "scheinbar".</rdfs:comment>
        <rdfs:label xml:lang="en">anscheinend und scheinbar</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"love"[]?"hate" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;love&quot;[]?&quot;hate&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(Token,Token))"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"love" [ ]? "hate"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;gehen/w1:1sie -->

    <owl:NamedIndividual rdf:about="&CQLF;gehen/w1:1sie">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds the word sequence "gehen sie" or "sie gehen"</rdfs:comment>
        <rdfs:label xml:lang="en">gehen /w1:1 sie</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;love:"love"[]*hate:"hate"::distance(love,have)<=3 -->

    <owl:NamedIndividual rdf:about="&CQLF;love:&quot;love&quot;[]*hate:&quot;hate&quot;::distance(love,have)&lt;=3">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Token,Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">love:"love" [ ]* hate:"hate"  ::  distance(love, have) &lt;= 3</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="DT"][pos="RB"][lemma="good"][pos="NN"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;DT&quot;][pos=&quot;RB&quot;][lemma=&quot;good&quot;][pos=&quot;NN&quot;]">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:Annotation(Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">[pos="DT"] [pos="RB"] [lemma="good"] [pos="NN"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;tiger:cat="PP" -->

    <owl:NamedIndividual rdf:about="&CQLF;tiger:cat=&quot;PP&quot;">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query searches for prepositional phrases in Tiger annotations.</rdfs:comment>
        <rdfs:label xml:lang="en">tiger:cat="PP"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"an?|the"Adjectives:[pos="ADJ"]+"man" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;an?|the&quot;Adjectives:[pos=&quot;ADJ&quot;]+&quot;man&quot;">
        <rdf:type rdf:resource="&CQLF;BlackLab"/>
        <rdfs:label xml:lang="en">"an?|the" Adjectives:[pos="ADJ"]+ "man"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->dep*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;dep*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt;dep * #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;a-node[afun='Pred'],2xechilda-node[afun='Obj']] -->

    <owl:NamedIndividual rdf:about="&CQLF;a-node[afun='Pred'],2xechilda-node[afun='Obj']]">
        <rdf:type rdf:resource="&CQLF;PML-TQ"/>
        <rdfs:comment>finds all predicates with two objects</rdfs:comment>
        <rdfs:label xml:lang="en">a-node [afun='Pred'], 2x echild a-node [afun ='Obj']]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->dep3,4#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;dep3,4#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt;dep 3,4 #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;GegenwartUNDZukunftNICHTVergangenheit -->

    <owl:NamedIndividual rdf:about="&CQLF;GegenwartUNDZukunftNICHTVergangenheit">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query searches for texts containing the words "Gegenwart" and "Zukunft", but not contaning the word "Vergangenheit".</rdfs:comment>
        <rdfs:label xml:lang="en">Gegenwart UND Zukunft NICHT Vergangenheit</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->coref[type="appos"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;coref[type=&quot;appos&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt;coref [type = "appos"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="VP"&node&#1>[func="OA"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;VP&quot;&amp;node&amp;#1&gt;[func=&quot;OA&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>finds a verb phrase dominating a node with label “OA”</rdfs:comment>
        <rdfs:label xml:lang="en">cat="VP" &amp; node &amp; #1 &gt;[func="OA"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;//NP//DT -->

    <owl:NamedIndividual rdf:about="&CQLF;//NP//DT">
        <rdf:type rdf:resource="&CQLF;Fangorn"/>
        <rdfs:comment>finds a noun phrase which dominates a determine</rdfs:comment>
        <rdfs:label xml:lang="en">//NP//DT</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[base="ver.*"&pos="V.*"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[base=&quot;ver.*&quot;&amp;pos=&quot;V.*&quot;]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds all verbs whose lemma starts with "ver-"</rdfs:comment>
        <rdfs:label xml:lang="en">[base="ver.*" &amp; pos="V.*"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>@l#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;@l#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;@l #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;tok&tok&#1->①[②:③="④"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;tok&amp;tok&amp;#1-&gt;①[②:③=&quot;④&quot;]#2">
        <rdf:type rdf:resource="&CQLF;[USECASE]:NameSpace(Annotation(GraphRelation(Object,Object)))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <searchNeed>①[Graph relation] pointing from one anonymous object to another by its specific annotation (③[tag]:④[value] ) which is derived from a specific ②[namespace] (②[namespace]:③[tag] )</searchNeed>
        <rdfs:label xml:lang="en">tok &amp; tok &amp; #1 -&gt;①[②:③ = "④"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;NP<-N -->

    <owl:NamedIndividual rdf:about="&CQLF;NP&lt;-N">
        <rdf:type rdf:resource="&CQLF;Tgrep2"/>
        <rdfs:comment>This query finds noun phrases whose rightmost child is a noun</rdfs:comment>
        <rdfs:label xml:lang="en">NP &lt;- N</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"gehen"&"sie"&(#1.#2|#2.#1) -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;gehen&quot;&amp;&quot;sie&quot;&amp;(#1.#2|#2.#1)">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds the word sequence "gehen sie" or "sie gehen"</rdfs:comment>
        <rdfs:label xml:lang="en">"gehen" &amp; "sie" &amp; (#1 . #2 | #2 . #1)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;//DT\NP -->

    <owl:NamedIndividual rdf:about="&CQLF;//DT\NP">
        <rdf:type rdf:resource="&CQLF;Fangorn"/>
        <rdfs:comment>finds a determiner immediately dominated by a noun phrase</rdfs:comment>
        <rdfs:label xml:lang="en">//DT\NP</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&pos="ART"&#1>@l#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;pos=&quot;ART&quot;&amp;#1&gt;@l#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>finds a noun with a leftmost child labelled as article</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; pos="ART" &amp; #1&gt;@l #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[tag="VB.*"][]*[tag="VB.*"]containing[tag="N.*"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[tag=&quot;VB.*&quot;][]*[tag=&quot;VB.*&quot;]containing[tag=&quot;N.*&quot;]">
        <rdf:type rdf:resource="&CQLF;SketchEngine"/>
        <rdfs:comment>This query matches a sequence starting and ending with a verb and containing at least one noun</rdfs:comment>
        <rdfs:label xml:lang="en">[tag="VB.*"] []* [tag="VB.*"] containing [tag="N.*"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;NEAR(Haus;Mutter;Vater;10) -->

    <owl:NamedIndividual rdf:about="&CQLF;NEAR(Haus;Mutter;Vater;10)">
        <rdf:type rdf:resource="&CQLF;DDCQL"/>
        <rdfs:comment>This query returns all hits that contain "Haus" and "Vater", and there are up to 10 words between them and one of those words is "Mutter"</rdfs:comment>
        <rdfs:label xml:lang="en">NEAR(Haus;Mutter;Vater;10)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Sonneprox/=/2/sentenceMond -->

    <owl:NamedIndividual rdf:about="&CQLF;Sonneprox/=/2/sentenceMond">
        <rdf:type rdf:resource="&CQLF;CQL"/>
        <rdfs:comment>This query finds “Sonne” and “Mond” appearing in any order exactly two sentences apart (not in the same and not in adjacent sentences).</rdfs:comment>
        <rdfs:label xml:lang="en">Sonne prox/=/2/sentence Mond</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"(E|É)conomie" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;(E|É)conomie&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:RegularExpression(Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"(E | É)conomie"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->dep[func="nsubj"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;dep[func=&quot;nsubj&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt; dep[func="nsubj"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[orth=minę|base=mina] -->

    <owl:NamedIndividual rdf:about="&CQLF;[orth=minę|base=mina]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds segments which either have the orthographic form minę, regardless of the interpretation of this segment, or are a form of the lexeme mina (e.g. mina, miny, minami).</rdfs:comment>
        <rdfs:label xml:lang="en">[orth = minę | base=mina]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&node&"ein"&#1>@l#2&#2.#3 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;node&amp;&quot;ein&quot;&amp;#1&gt;@l#2&amp;#2.#3">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>finds “ein” at the second position in a noun phrase like “solch ein ...”</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; node &amp; "ein" &amp; #1 &gt;@l #2 &amp; #2 . #3</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;/NP -->

    <owl:NamedIndividual rdf:about="&CQLF;/NP">
        <rdf:type rdf:resource="&CQLF;Fangorn"/>
        <rdfs:comment>This query finds trees where the root node is a noun phrase (label: NP)</rdfs:comment>
        <rdfs:label xml:lang="en">/NP</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[SentenceNOTEXIST[Wordsurface=”saw”]] -->

    <owl:NamedIndividual rdf:about="&CQLF;[SentenceNOTEXIST[Wordsurface=”saw”]]">
        <rdf:type rdf:resource="&CQLF;MQL"/>
        <rdfs:comment>This query finds sentences in which the word “saw” does not occur</rdfs:comment>
        <rdfs:label xml:lang="en">[Sentence NOTEXIST [Word surface=”saw”]]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1$#2&#1^*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1$#2&amp;#1^*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 $ #2 &amp; #1 ^* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"sie"&"gehen"&#1.#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;sie&quot;&amp;&quot;gehen&quot;&amp;#1.#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds the word sequence "sie gehen".</rdfs:comment>
        <rdfs:label xml:lang="en">"sie" &amp; "gehen" &amp; #1 . #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="NN"][]*[pos="NN"]withinnp -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;NN&quot;][]*[pos=&quot;NN&quot;]withinnp">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:comment>This query looks for a sequence of two singular nouns within the same NP</rdfs:comment>
        <rdfs:label xml:lang="en">[pos="NN"] []* [pos="NN"] within np</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;MORPH(VRBimpv)ODERMORPH(VRBinfv) -->

    <owl:NamedIndividual rdf:about="&CQLF;MORPH(VRBimpv)ODERMORPH(VRBinfv)">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds main verbs in imperative or infinitive form</rdfs:comment>
        <rdfs:label xml:lang="en">MORPH(VRB imp v) ODER MORPH(VRB inf v)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"gehen"&"sie"&(#1.#2|#2.#1) -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;gehen&quot;&amp;&quot;sie&quot;&amp;(#1.#2|#2.#1)">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">"gehen" &amp; "sie" &amp; (#1 . #2 | #2 . #1)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&cat="VP"&#1$#2&#1.*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;cat=&quot;VP&quot;&amp;#1$#2&amp;#1.*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query looks for NP being a sister of and followed by VP.</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; cat="VP" &amp; #1 $ #2 &amp; #1 .* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=ART][pos=NN] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=ART][pos=NN]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds a sequence of ART+NN</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=ART][pos=NN]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="VP"&cat="NP"&#1$#2&#2.2#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;VP&quot;&amp;cat=&quot;NP&quot;&amp;#1$#2&amp;#2.2#1">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>Look for all VPs being a sister of and preceded by NPs with one token in between</rdfs:comment>
        <rdfs:label xml:lang="en">cat="VP" &amp; cat="NP" &amp; #1 $ #2 &amp; #2 .2 #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="RB"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;RB&quot;]">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:Annotation(Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <encoding>UTF-8</encoding>
        <rdfs:label xml:lang="en">[pos="RB"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"love"[]*"hate" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;love&quot;[]*&quot;hate&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(Token,Token))"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"love" [ ]* "hate"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[word="Tag"].#a:[word="der"]&#a.#b:[word="offenen"]&#b.[word="Tür"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[word=&quot;Tag&quot;].#a:[word=&quot;der&quot;]&amp;#a.#b:[word=&quot;offenen&quot;]&amp;#b.[word=&quot;Tür&quot;]">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>This query finds the word sequence "Tag der offenen Tür" ('open day')</rdfs:comment>
        <rdfs:label xml:lang="en">[word="Tag"] . #a:[word="der"] &amp; #a . #b:[word="offenen"] &amp; #b . [word="Tür"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;/d(ie|er|as)/ -->

    <owl:NamedIndividual rdf:about="&CQLF;/d(ie|er|as)/">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds "der", "die", "das"</rdfs:comment>
        <rdfs:label xml:lang="en">/d(ie|er|as)/</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;anscheinendoderscheinbar -->

    <owl:NamedIndividual rdf:about="&CQLF;anscheinendoderscheinbar">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query searches for texts containing the word "anscheinend" or the word "scheinbar" or both.</rdfs:comment>
        <rdfs:label xml:lang="en">anscheinend oder scheinbar</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat=”NP”&“pos=ART”&#1>#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=”NP”&amp;“pos=ART”&amp;#1&gt;#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>finds a noun phrase which immediately dominates an article</rdfs:comment>
        <rdfs:label xml:lang="en">cat=”NP” &amp; “pos=ART” &amp; #1 &gt; #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;a-node[afun='Pred'],2-xechilda-node[afun='Obj']] -->

    <owl:NamedIndividual rdf:about="&CQLF;a-node[afun='Pred'],2-xechilda-node[afun='Obj']]">
        <rdf:type rdf:resource="&CQLF;PML-TQ"/>
        <rdfs:comment>finds all predicates with two or less objects</rdfs:comment>
        <rdfs:label xml:lang="en">a-node [afun='Pred'], 2-x echild a-node [afun ='Obj']]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#2->dep[func=‎/.*‎/]#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#2-&gt;dep[func=‎/.*‎/]#1">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #2 -&gt;dep[func=‎/ .* ‎/] #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[tag="N.*"]+within[tag="VB.*"][]*[tag="VB.*"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[tag=&quot;N.*&quot;]+within[tag=&quot;VB.*&quot;][]*[tag=&quot;VB.*&quot;]">
        <rdf:type rdf:resource="&CQLF;SketchEngine"/>
        <rdfs:label xml:lang="en">[tag="N.*"]+ within [tag="VB.*"] []* [tag="VB.*"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;..cept -->

    <owl:NamedIndividual rdf:about="&CQLF;..cept">
        <rdf:type rdf:resource="&CQLF;grep"/>
        <rdfs:comment>This query will match anything that has two characters and then the string "cept" , e.g. "acceptance", "exceptions", "unacceptable", "except" etc.</rdfs:comment>
        <rdfs:label xml:lang="en">..cept</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;tok="①"&tok="②"&#1->③[④:⑤="⑥"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;tok=&quot;①&quot;&amp;tok=&quot;②&quot;&amp;#1-&gt;③[④:⑤=&quot;⑥&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdf:type rdf:resource="&CQLF;[USECASE]:NameSpace(Annotation(GraphRelation(Object::surface,Object::surface)))"/>
        <searchNeed>③[Graph relation] pointing from one ①[object (specified by its surface form)] to ②[another] by its specific annotation ( ⑤[tag]:⑥[value] ) which is derived from a specific ④[namespace] ( ④[namespace]:⑤[tag] )</searchNeed>
        <rdfs:label xml:lang="en">tok="①" &amp; tok="②" &amp; #1 -&gt;③[④:⑤ = "⑥"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;derprox/=/2//orderedTag -->

    <owl:NamedIndividual rdf:about="&CQLF;derprox/=/2//orderedTag">
        <rdf:type rdf:resource="&CQLF;CQL"/>
        <rdfs:comment>This query finds words "der" and "Tag" with exactly one word in between.</rdfs:comment>
        <rdfs:label xml:lang="en">der prox/=/2//ordered Tag</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1$#2&#2.2#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1$#2&amp;#2.2#1">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 $ #2 &amp; #2 .2 #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;&nehmen/w0MORPH(VRBfinv) -->

    <owl:NamedIndividual rdf:about="&CQLF;&amp;nehmen/w0MORPH(VRBfinv)">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds all forms of "nehmen" used as a finite verb</rdfs:comment>
        <rdfs:label xml:lang="en">&amp;nehmen /w0 MORPH(VRB fin v)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1_ol_#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1_ol_#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 _ol_ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<np_len="3">[]*</np_len> -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;np_len=&quot;3&quot;&gt;[]*&lt;/np_len&gt;">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Length[min=N,max=M](TokenSequence)"/>
        <rdfs:label xml:lang="en">&lt;np_len = "3"&gt; [ ]* &lt;/np_len&gt;</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=ART][pos=ADJA]?[pos=NN] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=ART][pos=ADJA]?[pos=NN]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query matches a noun proceeded by an article and one possibe adjective.</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=ART][pos=ADJA]? [pos=NN]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[lemma="economique"%cd] -->

    <owl:NamedIndividual rdf:about="&CQLF;[lemma=&quot;economique&quot;%cd]">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:DiacriticsSensitivity(Annotation(Token))"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:CaseSensitivity(Annotation(Token))"/>
        <rdfs:label xml:lang="en">[lemma="economique" %cd]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Mond? -->

    <owl:NamedIndividual rdf:about="&CQLF;Mond?">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds all words starting with "Mond-" and containing exactly 5 letters, e.g. "Monde", "Mondo", "Mondy", "Monds" etc.</rdfs:comment>
        <rdfs:label xml:lang="en">Mond?</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"love"&"hate"&#1^3#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;love&quot;&amp;&quot;hate&quot;&amp;#1^3#2">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Token,Token)"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">"love" &amp; "hate" &amp; #1 ^3 #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;‎"tells‎"&‎"about‎"&#1^*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;‎&quot;tells‎&quot;&amp;‎&quot;about‎&quot;&amp;#1^*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">‎"tells‎" &amp; ‎"about‎" &amp; #1 ^* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[word="der"&pos="PRELS"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[word=&quot;der&quot;&amp;pos=&quot;PRELS&quot;]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query searches for "der" as relative pronoun</rdfs:comment>
        <rdfs:label xml:lang="en">[word="der" &amp; pos="PRELS"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;/S[not//_[@lex='saw']] -->

    <owl:NamedIndividual rdf:about="&CQLF;/S[not//_[@lex='saw']]">
        <rdf:type rdf:resource="&CQLF;LPath"/>
        <rdfs:comment>This query finds sentences that do not include the word "saw"</rdfs:comment>
        <rdfs:label xml:lang="en">/S[not //_[@lex='saw']]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;a-node[afun='Pred'],1+xechilda-node[afun='Obj']] -->

    <owl:NamedIndividual rdf:about="&CQLF;a-node[afun='Pred'],1+xechilda-node[afun='Obj']]">
        <rdf:type rdf:resource="&CQLF;PML-TQ"/>
        <rdfs:comment>finds all predicates with one or more objects</rdfs:comment>
        <rdfs:label xml:lang="en">a-node [afun='Pred'], 1+x echild a-node [afun ='Obj']]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt; #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Mond+ -->

    <owl:NamedIndividual rdf:about="&CQLF;Mond+">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds "Mond" as well as all words starting with "Mond-" and containing exactly 5 letters, e.g. "Monde", "Mondo", "Mondy", "Monds" etc.</rdfs:comment>
        <rdfs:label xml:lang="en">Mond+</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;!ähm -->

    <owl:NamedIndividual rdf:about="&CQLF;!ähm">
        <rdf:type rdf:resource="&CQLF;DGD"/>
        <rdfs:comment>This query finds texts fragments containing  "ahm", "ehm", "hm", "hmm", "hmhm" etc.</rdfs:comment>
        <rdfs:label xml:lang="en">!ähm</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;/[Ss]o/&"und"&#1.*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;/[Ss]o/&amp;&quot;und&quot;&amp;#1.*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds "so" or "So" (directly or indirectly) followed by "und"</rdfs:comment>
        <rdfs:label xml:lang="en">/[Ss]o/ &amp; "und" &amp; #1 .* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="VBG"][pos="SENT"]?</s>; -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;VBG&quot;][pos=&quot;SENT&quot;]?&lt;/s&gt;;">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:comment>This query finds present participle at the end of a sentence</rdfs:comment>
        <rdfs:label xml:lang="en">[pos="VBG"] [pos="SENT"]?&lt;/s&gt;;</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;gehen/-w1:1sie -->

    <owl:NamedIndividual rdf:about="&CQLF;gehen/-w1:1sie">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds the word sequence "sie gehen".</rdfs:comment>
        <rdfs:label xml:lang="en">gehen /-w1:1 sie</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Willkommen -->

    <owl:NamedIndividual rdf:about="&CQLF;Willkommen">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>Find  token "Willkommen" ('welcome')</rdfs:comment>
        <rdfs:label xml:lang="en">Willkommen</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"wahrung"%cd; -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;wahrung&quot;%cd;">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:comment>This query ignores case and diacritics</rdfs:comment>
        <rdfs:label xml:lang="en">"wahrung" %cd;</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>[func=‎/NP-.*‎/]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;[func=‎/NP-.*‎/]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;[func=‎/ NP-.*‎/ ] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;“[Ss]chön” -->

    <owl:NamedIndividual rdf:about="&CQLF;“[Ss]chön”">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds words "schön" and "Schön".</rdfs:comment>
        <rdfs:label xml:lang="en">“[Ss]chön”</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;①="②"&③="④"&#1^#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;①=&quot;②&quot;&amp;③=&quot;④&quot;&amp;#1^#2">
        <rdf:type rdf:resource="&CQLF;[USECASE]:Collocation(Annotation(Object),Annotation(Object))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <searchNeed>Immediate collocation of anonymous objects by their annotations [①③tag:②④value]</searchNeed>
        <rdfs:label xml:lang="en">①="②" &amp; ③="④" &amp; #1 ^ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;pos="RB" -->

    <owl:NamedIndividual rdf:about="&CQLF;pos=&quot;RB&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:Annotation(Token)"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">pos = "RB"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;pos=/P.*/&pos=/V.FIN/&#2->dep[func!="sbj"]#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;pos=/P.*/&amp;pos=/V.FIN/&amp;#2-&gt;dep[func!=&quot;sbj&quot;]#1">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query looks for dependencies between pronouns and finite verbs where the pronoun is not a subject of the verb (func!="sbj")</rdfs:comment>
        <rdfs:label xml:lang="en">pos=/P.*/ &amp; pos=/V.FIN/ &amp; #2 -&gt;dep[func!="sbj"] #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"war"&"peace"&#1^*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;war&quot;&amp;&quot;peace&quot;&amp;#1^*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[*](Collocation(Token,Token))"/>
        <rdfs:label xml:lang="en">"war" &amp; "peace" &amp; #1 ^* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<s>[][][] -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;s&gt;[][][]">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Containment[left](TokenSequence,Context)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">&lt;s&gt; [ ]  [ ]  [ ]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Sonneprox//3/Mond -->

    <owl:NamedIndividual rdf:about="&CQLF;Sonneprox//3/Mond">
        <rdf:type rdf:resource="&CQLF;CQL"/>
        <rdfs:comment>This query finds “Sonne” and “Mond” with zero, one or two words in between.</rdfs:comment>
        <rdfs:label xml:lang="en">Sonne prox//3/ Mond</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&#1:tokenarity=3,5 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;#1:tokenarity=3,5">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; #1:tokenarity=3,5</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->coref[type="ana"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;coref[type=&quot;ana&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt;coref [type = "ana"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Sonne/w3Mond -->

    <owl:NamedIndividual rdf:about="&CQLF;Sonne/w3Mond">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds “Sonne” and “Mond” with zero, one or two words in between.</rdfs:comment>
        <rdfs:label xml:lang="en">Sonne /w3 Mond</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"a""great"withinnp -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;a&quot;&quot;great&quot;withinnp">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Containment[within](TokenSequence,Context)"/>
        <rdfs:label xml:lang="en">"a" "great" within np</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&#1:arity=3,5 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;#1:arity=3,5">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; #1:arity=3,5</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"und"&"so"&#2.*#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;und&quot;&amp;&quot;so&quot;&amp;#2.*#1">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[*](Precedence(Token,Token))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">"und" &amp; "so" &amp;  #2 .* #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=adj]+ -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=adj]+">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query matches an adjective or a sequence of adjectives.</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=adj]+</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="PP"&pos="PRELS"&#1>@r#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;PP&quot;&amp;pos=&quot;PRELS&quot;&amp;#1&gt;@r#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>finds a preposition phrase with the rightmost child labelled as relative pronoun</rdfs:comment>
        <rdfs:label xml:lang="en">cat="PP" &amp; pos="PRELS" &amp; #1&gt;@r #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;tok&tok&#1->①[②=/③/]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;tok&amp;tok&amp;#1-&gt;①[②=/③/]#2">
        <rdf:type rdf:resource="&CQLF;[USECASE]:RegEx(Annotation(GraphRelation(Object,Object)))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <searchNeed>①[Graph relation] pointing from one anonymous object to another by its specific annotation (②[tag]:③[value] ) where ③{value} is partially matched by regular expression</searchNeed>
        <rdfs:label xml:lang="en">tok &amp; tok &amp; #1 -&gt;①[②=/③/] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[word=#x].[word=#x] -->

    <owl:NamedIndividual rdf:about="&CQLF;[word=#x].[word=#x]">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>This query finds all dublications in text</rdfs:comment>
        <rdfs:label xml:lang="en">[word=#x] . [word=#x]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1_o_#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1_o_#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 _o_ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[word=/[a-z].*/&pos="NOUN"&proper="proper"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[word=/[a-z].*/&amp;pos=&quot;NOUN&quot;&amp;proper=&quot;proper&quot;]">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>Find all proper names beginning with a lowercase</rdfs:comment>
        <rdfs:label xml:lang="en">[word=/[a-z].*/ &amp; pos="NOUN" &amp; proper="proper"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;lemma=/(be|have)/ -->

    <owl:NamedIndividual rdf:about="&CQLF;lemma=/(be|have)/">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:RegularExpression(Annotation(Token))"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Complement(Annotation(Token))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">lemma=/(be|have)/</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;MORPH(PRNreldat) -->

    <owl:NamedIndividual rdf:about="&CQLF;MORPH(PRNreldat)">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds all relative pronouns in dative.</rdfs:comment>
        <rdfs:label xml:lang="en">MORPH(PRN rel dat)</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Kinder/p0Eltern -->

    <owl:NamedIndividual rdf:about="&CQLF;Kinder/p0Eltern">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query looks for "Kinder" and "Eltern" occurring in the same paragraph</rdfs:comment>
        <rdfs:label xml:lang="en">Kinder /p0 Eltern</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1->dep3#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1-&gt;dep3#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 -&gt;dep 3 #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"to"[word="be"] -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;to&quot;[word=&quot;be&quot;]">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"to" [word="be"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&#1:root -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;#1:root">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; #1:root</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="S"&#1:arity=5 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;S&quot;&amp;#1:arity=5">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>Find a sentence with 5 constituents</rdfs:comment>
        <rdfs:label xml:lang="en">cat="S" &amp; #1:arity=5</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[][][]</s> -->

    <owl:NamedIndividual rdf:about="&CQLF;[][][]&lt;/s&gt;">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Containment[right](TokenSequence,Context)"/>
        <rdfs:label xml:lang="en">[ ]  [ ]  [ ] &lt;/s&gt;</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP" -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:Annotation(Node)"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">cat = "NP"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos="VVIMP"|pos="VVINF"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=&quot;VVIMP&quot;|pos=&quot;VVINF&quot;]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds main verbs in imperative or infinitive form</rdfs:comment>
        <rdfs:label xml:lang="en">[pos = "VVIMP" | pos="VVINF"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;pos=/VV.*/ -->

    <owl:NamedIndividual rdf:about="&CQLF;pos=/VV.*/">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">pos=/VV.*/</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&cat="S"&#1>[func="RC"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;cat=&quot;S&quot;&amp;#1&gt;[func=&quot;RC&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds all nominal phrases which dominate a sentence that functions as a relative clause</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; cat="S" &amp; #1&gt;[func="RC"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&pos="ART"&#1>*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;pos=&quot;ART&quot;&amp;#1&gt;*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds a noun phrase which dominates an article</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; pos="ART" &amp; #1 &gt;* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;//DT\NP -->

    <owl:NamedIndividual rdf:about="&CQLF;//DT\\NP">
        <rdf:type rdf:resource="&CQLF;Fangorn"/>
        <rdfs:comment>finds a determiner dominated by a noun phrase</rdfs:comment>
        <rdfs:label xml:lang="en">//DT\\NP</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;NP!<<PP -->

    <owl:NamedIndividual rdf:about="&CQLF;NP!&lt;&lt;PP">
        <rdf:type rdf:resource="&CQLF;Tgrep2"/>
        <rdfs:comment>This query matches an NP that does not dominate a PP</rdfs:comment>
        <rdfs:label xml:lang="en">NP !&lt;&lt; PP</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&#1:arity=5 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;#1:arity=5">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; #1:arity=5</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"very"{3,4} -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;very&quot;{3,4}">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Repetition[min=N,max=M](Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"very"{3,4}</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;anscheinendnichtscheinbar -->

    <owl:NamedIndividual rdf:about="&CQLF;anscheinendnichtscheinbar">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds texts containing the word "anscheinend" but not containing the word "scheinbar".</rdfs:comment>
        <rdfs:label xml:lang="en">anscheinend nicht scheinbar</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;sieprox////orderedgehen -->

    <owl:NamedIndividual rdf:about="&CQLF;sieprox////orderedgehen">
        <rdf:type rdf:resource="&CQLF;CQL"/>
        <rdfs:comment>This query finds the word sequence "sie gehen"</rdfs:comment>
        <rdfs:label xml:lang="en">sie prox////ordered gehen</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#2->dep[func="sbj"]#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#2-&gt;dep[func=&quot;sbj&quot;]#1">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #2 -&gt;dep[func="sbj"] #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;naIvetE -->

    <owl:NamedIndividual rdf:about="&CQLF;naIvetE">
        <rdf:type rdf:resource="&CQLF;PhiloLogic"/>
        <rdfs:comment>This query matches all accented and non-accented forms: naiveté, naïveté, naivete</rdfs:comment>
        <rdfs:label xml:lang="en">naIvetE</rdfs:label>
        <owl:incompatibleWith>this usage conflicts with an externally set(table) parameter for case-sensitivity</owl:incompatibleWith>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"love"[]{1,5}"hate" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;love&quot;[]{1,5}&quot;hate&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Distance[min=N,max=M](Token,Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"love" [ ]{1, 5} "hate"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[lemma="demander"].#det:[pos=/DET.*/]&#det.[pos="NOM"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[lemma=&quot;demander&quot;].#det:[pos=/DET.*/]&amp;#det.[pos=&quot;NOM&quot;]">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>This query finds all forms of "demander" followed by an article  (DET:...) and a noun (NOM).</rdfs:comment>
        <rdfs:label xml:lang="en">[lemma="demander"] . #det:[pos=/DET.*/] &amp; #det . [pos="NOM"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[orth="[a-z].*"&pos=NE] -->

    <owl:NamedIndividual rdf:about="&CQLF;[orth=&quot;[a-z].*&quot;&amp;pos=NE]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>Find all proper names beginning with a lowercase</rdfs:comment>
        <rdfs:label xml:lang="en">[orth="[a-z].*" &amp; pos=NE]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;#OV -->

    <owl:NamedIndividual rdf:about="&CQLF;#OV">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:label xml:lang="en">#OV</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"is"[word="."&rbound(s)] -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;is&quot;[word=&quot;.&quot;&amp;rbound(s)]">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Containment[right](Token,Context)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"is" [word = "." &amp; rbound(s) ]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="VP"&node&#1>[func="OA"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;VP&quot;&amp;node&amp;#1&gt;[func=&quot;OA&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>finds a verb phrase dominating a node with label “OA”</rdfs:comment>
        <rdfs:label xml:lang="en">cat="VP" &amp; node &amp; #1 &gt;[func="OA"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"(?c)Panama" -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;(?c)Panama&quot;">
        <rdf:type rdf:resource="&CQLF;BlackLab"/>
        <rdfs:comment>This query matches a pattern case sensitively,</rdfs:comment>
        <rdfs:label xml:lang="en">"(?c)Panama"</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<s/>!containing[tag="N.*"] -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;s/&gt;!containing[tag=&quot;N.*&quot;]">
        <rdf:type rdf:resource="&CQLF;SketchEngine"/>
        <rdfs:comment>This query looks for sentences not containing any nouns</rdfs:comment>
        <rdfs:label xml:lang="en">&lt;s/&gt; !containing  [tag="N.*"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=NN&case~nom] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=NN&amp;case~nom]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds all nouns with an nominative interpretation of case (even if this is not the interpretation selected in a given context)</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=NN &amp; case~nom]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"wahrung"%cd -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;wahrung&quot;%cd">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:diacritics[insensitive](Token)"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:case[insensitive](Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"wahrung" %cd</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"." -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;.&quot;">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:RegularExpression(Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"."</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=("VVIMP"|"VVINF")] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=(&quot;VVIMP&quot;|&quot;VVINF&quot;)]">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>This query finds main verbs in imperative or infinitive form</rdfs:comment>
        <rdfs:label xml:lang="en">[pos = ("VVIMP" | "VVINF")]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[pos=NN&case~~nom] -->

    <owl:NamedIndividual rdf:about="&CQLF;[pos=NN&amp;case~~nom]">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds all nouns whose all case interpretations as given by a morphological analyser (before disambiguation in a given context) are nominative</rdfs:comment>
        <rdfs:label xml:lang="en">[pos=NN &amp; case~~nom]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[word="the"][pos="NN"][lemma="go"] -->

    <owl:NamedIndividual rdf:about="&CQLF;[word=&quot;the&quot;][pos=&quot;NN&quot;][lemma=&quot;go&quot;]">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:Annotation(Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">[word="the"] [pos="NN"] [lemma="go"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&cat="S"&#1>[func="RC"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;cat=&quot;S&quot;&amp;#1&gt;[func=&quot;RC&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds all nominal phrases which dominate a sentence that functions as a relative clause</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; cat="S" &amp; #1&gt;[func="RC"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<s_len="[3-4]">[]*</s_len> -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;s_len=&quot;[3-4]&quot;&gt;[]*&lt;/s_len&gt;">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Length[min=N,max=M](TokenSequence)"/>
        <rdfs:label xml:lang="en">&lt;s_len = "[3-4]"&gt; [ ]* &lt;/s_len&gt;</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;#s:[cat="S"]!>*%w:[word="saw"] -->

    <owl:NamedIndividual rdf:about="&CQLF;#s:[cat=&quot;S&quot;]!&gt;*%w:[word=&quot;saw&quot;]">
        <rdf:type rdf:resource="&CQLF;StockholmTreeAligner"/>
        <rdfs:comment>Find sentences that do not include the word ’saw’.</rdfs:comment>
        <rdfs:label xml:lang="en">#s:[cat="S"] !&gt;* %w:[word="saw"]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1_r_#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1_r_#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 _r_ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"confus.*"[]*"by"within<s/> -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;confus.*&quot;[]*&quot;by&quot;within&lt;s/&gt;">
        <rdf:type rdf:resource="&CQLF;SketchEngine"/>
        <rdfs:comment>This query search for "confus" followed by "by" within a sentence.</rdfs:comment>
        <rdfs:label xml:lang="en">"confus.*" []* "by" within &lt;s/&gt;</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Tagderoffenen/iTür -->

    <owl:NamedIndividual rdf:about="&CQLF;Tagderoffenen/iTür">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds all occurrences of the word sequence "Tag der offenen Tür" as well as  "Tag der Offenen Tür"</rdfs:comment>
        <rdfs:label xml:lang="en">Tag der offenen/i Tür</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<s>[pos="VBG"]; -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;s&gt;[pos=&quot;VBG&quot;];">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:comment>This query finds present participle at the beginning of a sentence.</rdfs:comment>
        <rdfs:label xml:lang="en">&lt;s&gt;[pos="VBG"];</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;lemma="sein"&pos="VAFIN"&#1_=_#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;lemma=&quot;sein&quot;&amp;pos=&quot;VAFIN&quot;&amp;#1_=_#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query searches for a lemma "sein" with the part-of-speech "VAFIN" at the same position</rdfs:comment>
        <rdfs:label xml:lang="en">lemma="sein" &amp; pos="VAFIN" &amp; #1 _=_ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1$*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1$*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 $* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Sonne/w2:2Mond -->

    <owl:NamedIndividual rdf:about="&CQLF;Sonne/w2:2Mond">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds “Sonne” and “Mond” with exactly one word in between, e.g. “Sonne und Mond” or “Mond und Sonne”.</rdfs:comment>
        <rdfs:label xml:lang="en">Sonne /w2:2 Mond</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;[word="Happily"&lbound(s)] -->

    <owl:NamedIndividual rdf:about="&CQLF;[word=&quot;Happily&quot;&amp;lbound(s)]">
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Containment[left](Token,Context)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">[word = "Happily" &amp; lbound(s) ]</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;this -->

    <owl:NamedIndividual rdf:about="&CQLF;this">
        <rdf:type rdf:resource="&CQLF;grep"/>
        <rdfs:comment>This query finds "this" in row text</rdfs:comment>
        <rdfs:label xml:lang="en">this</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;‎"tells‎"&‎"Wikinews‎"&#1^#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;‎&quot;tells‎&quot;&amp;‎&quot;Wikinews‎&quot;&amp;#1^#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">‎"tells‎" &amp; ‎"Wikinews‎" &amp; #1 ^ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;<s><np>[]*</np>[]*</s> -->

    <owl:NamedIndividual rdf:about="&CQLF;&lt;s&gt;&lt;np&gt;[]*&lt;/np&gt;[]*&lt;/s&gt;">
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdf:type rdf:resource="&CQLF;[USECASE][COMPLEX]:Containment[within](TokenSequence,Context)"/>
        <rdfs:label xml:lang="en">&lt;s&gt; &lt;np&gt; [ ]* &lt;/np&gt; [ ]* &lt;/s&gt;</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;#n1:[cat="NP"]>RC#n2:[cat="S"]&discontinuous(#n1)&#n1>*#t1:[pos=("NN"|"NE")]&#t1.*#t2:[pos=/V.*/]&#t2.*#n2 -->

    <owl:NamedIndividual rdf:about="&CQLF;#n1:[cat=&quot;NP&quot;]&gt;RC#n2:[cat=&quot;S&quot;]&amp;discontinuous(#n1)&amp;#n1&gt;*#t1:[pos=(&quot;NN&quot;|&quot;NE&quot;)]&amp;#t1.*#t2:[pos=/V.*/]&amp;#t2.*#n2">
        <rdf:type rdf:resource="&CQLF;TigerSearch"/>
        <rdfs:comment>This query finds a discontinuous noun phrase dominated a relative clause (e.g. Ich habe ein Buch gelesen, das mir gut gefallen hat.).</rdfs:comment>
        <rdfs:label xml:lang="en">#n1:[cat="NP"] &gt;RC #n2:[cat="S"] &amp; discontinuous(#n1) &amp; #n1 &gt;* #t1:[pos=("NN" | "NE")] &amp; #t1 .* #t2:[pos=/V.*/] &amp; #t2 .* #n2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1_or_#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1_or_#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 _or_ #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1>[relname="elaboration"]#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1&gt;[relname=&quot;elaboration&quot;]#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 &gt;[relname="elaboration"] #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;cat="NP"&cat="VP"&#1$#2&#1.#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;cat=&quot;NP&quot;&amp;cat=&quot;VP&quot;&amp;#1$#2&amp;#1.#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query looks for NP being a sister of and immediately followed by VP.</rdfs:comment>
        <rdfs:label xml:lang="en">cat="NP" &amp; cat="VP" &amp; #1 $ #2 &amp; #1 . #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1$#2&#1.#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1$#2&amp;#1.#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 $ #2 &amp; #1 . #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"und"&/[Ss]o/&#2.*#1 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;und&quot;&amp;/[Ss]o/&amp;#2.*#1">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds "und" preceded by  "so" or "So" (directly or indirectly).</rdfs:comment>
        <rdfs:label xml:lang="en">"und" &amp; /[Ss]o/ &amp;  #2 .* #1</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;Mond* -->

    <owl:NamedIndividual rdf:about="&CQLF;Mond*">
        <rdf:type rdf:resource="&CQLF;Cosmas2"/>
        <rdfs:comment>This query finds "Mond" and all other words beginning with "Mond-", e.g. "Mondschein", "Mondes" etc.</rdfs:comment>
        <rdfs:label xml:lang="en">Mond*</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"achete"%d -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;achete&quot;%d">
        <rdf:type rdf:resource="&CQLF;[USECASE][SIMPLE]:diacritics[insensitive](Token)"/>
        <rdf:type rdf:resource="&CQLF;CQP"/>
        <rdfs:label xml:lang="en">"achete" %d</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;node&node&#1$#2&#1.*#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;node&amp;node&amp;#1$#2&amp;#1.*#2">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:label xml:lang="en">node &amp; node &amp; #1 $ #2 &amp; #1 .* #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;"Tag"&"der"&"offenen"&"Tür"&#1.#2&#2.#3&#3.#4 -->

    <owl:NamedIndividual rdf:about="&CQLF;&quot;Tag&quot;&amp;&quot;der&quot;&amp;&quot;offenen&quot;&amp;&quot;Tür&quot;&amp;#1.#2&amp;#2.#3&amp;#3.#4">
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <rdfs:comment>This query finds the word sequence "Tag der offenen Tür" ('open day')</rdfs:comment>
        <rdfs:label xml:lang="en">"Tag"&amp; "der" &amp; "offenen" &amp; "Tür" &amp; #1 . #2 &amp; #2 . #3 &amp; #3 . #4</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;①="②"&③="④"&#1.#2 -->

    <owl:NamedIndividual rdf:about="&CQLF;①=&quot;②&quot;&amp;③=&quot;④&quot;&amp;#1.#2">
        <rdf:type rdf:resource="&CQLF;[USECASE]:Precedence(Annotation(Object),Annotation(Object))"/>
        <rdf:type rdf:resource="&CQLF;AQL"/>
        <searchNeed>Immediate precedence of anonymous objects by their annotations [①③tag:②④value]</searchNeed>
        <rdfs:label xml:lang="en">①="②" &amp; ③="④" &amp; #1 . #2</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- &CQLF;gehensie|siegehen -->

    <owl:NamedIndividual rdf:about="&CQLF;gehensie|siegehen">
        <rdf:type rdf:resource="&CQLF;Poliqarp"/>
        <rdfs:comment>This query finds the word sequence "gehen sie" or "sie gehen"</rdfs:comment>
        <rdfs:label xml:lang="en">gehen sie | sie gehen</rdfs:label>
    </owl:NamedIndividual>
</rdf:RDF>
